<?php

namespace Database\Seeders;

use App\Models\Dataset;
use Illuminate\Database\QueryException;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use League\Csv\Exception;
use League\Csv\Reader;

class DatasetSeeder extends Seeder
{
    /**
     * Reads the datasets from the CSV generated by nhanes_utils and populates the database.
     */
    public function run(): void
    {
        try {
            $csv = Reader::createFromPath(storage_path('app/datasets.csv'), 'r');
            $csv->setHeaderOffset(0);
            $datasets = $csv->getRecords();
        } catch (Exception $e) {
            exit($e->getMessage());
        }

        foreach ($datasets as $dataset) {
            $model = new Dataset([
                'start_year' => explode('-', $dataset['years'])[0],
                'end_year' => explode('-', $dataset['years'])[1],
                'component' => $dataset['component'],
                'description' => $dataset['description'],
                'docs_url' => $dataset['docs_url'],
                'data_url' => $dataset['data_url'],
            ]);

            // If a dataset with data_url already exists continue, otherwise save the model
            if (Dataset::query()->where('data_url', $model->data_url)->exists()) {
                continue;
            }
            $model->save();
        }

        // Populate the database with the curated datasets
        echo 'Creating tables for curated datasets...'.PHP_EOL;
        $this->populate_dataset_tables(true);
    }

    /**
     * Populates the database with the curated datasets.
     */
    private function populate_dataset_tables($fresh = false): void
    {
        // Here is the list of curated datasets which will be made available
        $datasets = [
            'laboratory/P_CBC.csv',
            'laboratory/CBC_J.csv',
            'laboratory/CBC_I.csv',
            'laboratory/CBC_H.csv',
            'laboratory/CBC_G.csv',
            'laboratory/CBC_F.csv',
            'laboratory/CBC_E.csv',
            'laboratory/CBC_D.csv',
            'laboratory/HIV_E.csv',
            'laboratory/HIV_G.csv',
            'laboratory/HIV_H.csv',
            'laboratory/HIV_F.csv',
            'laboratory/HIV_J.csv',
            'laboratory/HIV_D.csv',
            'laboratory/HIV_I.csv',
            'laboratory/L03_C.csv',
            'laboratory/L03_B.csv',
            'laboratory/LAB03.csv',
            'questionnaire/MCQ_E.csv',
            'questionnaire/MCQ.csv',
            'questionnaire/MCQ_D.csv',
            'questionnaire/MCQ_C.csv',
            'questionnaire/MCQ_B.csv',
            'questionnaire/MCQ_F.csv',
            'questionnaire/MCQ_G.csv',
            'questionnaire/MCQ_H.csv',
            'questionnaire/MCQ_I.csv',
            'questionnaire/MCQ_J.csv',
            'questionnaire/P_MCQ.csv',
            'questionnaire/P_SMQ.csv',
            'questionnaire/SMQ_J.csv',
            'questionnaire/SMQ_I.csv',
            'questionnaire/SMQ_H.csv',
            'questionnaire/SMQ_G.csv',
            'questionnaire/SMQ_F.csv',
            'questionnaire/SMQ_E.csv',
            'questionnaire/SMQ_D.csv',
            'questionnaire/SMQ_C.csv',
            'questionnaire/SMQ_B.csv',
            'questionnaire/P_SMQ.csv',
            'questionnaire/SMQ.csv',
            'custom/SMQ_CBC.csv',
        ];

        foreach ($datasets as $dataset) {
            $table_name = substr($dataset, strrpos($dataset, '/') + 1);
            $table_name = substr($table_name, 0, strrpos($table_name, '.'));

            // Check if the SQL table already exists and fresh is false
            if (Schema::hasTable($table_name) && ! $fresh) {
                echo "Table $table_name already exists".PHP_EOL;

                continue;
            }

            // Check if we have the file, continue if not
            $csv_path = storage_path('app/datasets/'.$dataset);
            if (! file_exists($csv_path)) {
                echo "File $csv_path does not exist".PHP_EOL;

                continue;
            }

            // if fresh is true, remove the table
            if ($fresh) {
                Schema::dropIfExists($table_name);
            }

            // Extract the data from the CSV using league
            try {
                $csv = Reader::createFromPath($csv_path, 'r');
            } catch (Exception $e) {
                echo $e->getMessage().PHP_EOL;

                continue;
            }

            $csv->setHeaderOffset(0);
            $header = $csv->getHeader();

            // get number of headers
            $headers_count = count($header);

            Schema::create($table_name, function (Blueprint $table) use ($header) {
                $seqn = array_shift($header);
                $table->float($seqn)->primary();

                foreach ($header as $column) {
                    $table->string($column, 50);
                }
            });

            // Disable query logging to prevent memory issues
            DB::disableQueryLog();

            // Calculate optimal chunk size then insert the data
            $batch_size = floor(65535 / $headers_count);
            $rows = $csv->getRecords();
            $chunks = array_chunk(iterator_to_array($rows), $batch_size);
            foreach ($chunks as $chunk) {
                try {
                    DB::table($table_name)->insert($chunk);
                } catch (QueryException $queryException) {
                    exit($queryException->getMessage());
                }
            }
        }
    }
}
